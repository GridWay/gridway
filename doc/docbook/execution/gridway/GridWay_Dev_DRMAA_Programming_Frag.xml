<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[

<!ENTITY % myents SYSTEM "../../entities">

%myents;

]>
<section>

  <section><title>DRMAA Sessions</title>
    <para>
    Let us start with the initialization steps of every DRMAA program. Before
    any call to a DRMAA function you must start a DRMAA session. The session
    is used to manage the jobs submitted in your Grid application. Before ending
    the program you should disengage from the previously started session, to
    free the internal session structures.
    </para>

    <para>
    Also, as you will see every DRMAA function returns an error code that allows
    you to check whether the call was successful or not (DRMAA_ERRNO_SUCCESS,
    if everything goes well). Through out this tutorial, for the  shake of
    clarity, we will get rid of error checking code in most cases.
    But remember that you should check return codes.
    </para>

    <para>
    The following example shows you how to manage a DRMAA session. It also shows
    some information about the DRMAA implementation and the DRMS you are using.
    </para>

  <screen>
 char         error[DRMAA_ERROR_STRING_BUFFER];
 int          result;
 char         contact[DRMAA_ATTR_BUFFER];
 unsigned int major;
 unsigned int minor;
 char         drm[DRMAA_ATTR_BUFFER];
 char         impl[DRMAA_ATTR_BUFFER];

 result = drmaa_init (NULL,
                      error,
                      DRMAA_ERROR_STRING_BUFFER-1);        (See 1)

 if ( result != DRMAA_ERRNO_SUCCESS)
 {
     fprintf(stderr,"drmaa_init() failed: %s\n", error);
     return -1;
 }
 else
     printf("drmaa_init() success \n");


 drmaa_get_contact(contact,
                   DRMAA_ATTR_BUFFER-1,
                   error,
                   DRMAA_ERROR_STRING_BUFFER-1);            (See 2)

 drmaa_version(&amp;major,
               &amp;minor,
               error,
               DRMAA_ERROR_STRING_BUFFER);

 drmaa_get_DRM_system(drm,
                      DRMAA_ATTR_BUFFER-1,
                      error,
                      DRMAA_ERROR_STRING_BUFFER-1);

 drmaa_get_DRMAA_implementation(impl,
                                DRMAA_ATTR_BUFFER-1,
                                error,
                                DRMAA_ERROR_STRING_BUFFER-1);

 printf("Using %s, details:\n",impl);
 printf("\t DRMAA version %i.%i\n",major,minor);
 printf("\t DRMS %s (contact: %s)\n",drm,contact);

 result = drmaa_exit (error, DRMAA_ERROR_STRING_BUFFER-1);  (See 3)       

 if ( result != DRMAA_ERRNO_SUCCESS)
 {
     fprintf(stderr,"drmaa_exit() failed: %s\n", error);
     return -1;
 }

 printf("drmaa_exit() success \n");
    </screen>
  <orderedlist>
    <listitem>
    <para>
    drmaa_init() is the first DRMAA function in a DRMAA program, and must be
    called only once per DRMAA program. Almost every DRMAA function uses to
    special arguments for error reporting pourposes: a string buffer (error),
    and its length (DRMAA_ERROR_STRING_BUFFER-1). As you can see DRMAA has
    some predefined buffer sizes for char * variables that you can use,
    although they are not mandatory.
    </para>

    <para>
    The first parameter of the drmaa_init() function is an implementation
    dependent string which may be used to specify which DRM system to use. In
    the GridWay library it can be used to select which GW daemon you
    want to connect to, NULL means the default option, localhost.
    </para>

    <para>
    If you try to call a DRMAA function outside a session, it will return the
    error code DRMAA_ERRNO_NO_ACTIVE_SESSION.
    </para>
    </listitem>

    <listitem>
    <para>
    This program also shows some information about the DRMAA implementation you
    are using, by calling the functions drmaa_get_contact(), drmaa_version(),
    drmaa_get_DRM_system() and drmaa_get_DRMAA_implementation(). You should see
    something like this:
    </para>

    <screen>
 Using DRMAA for GridWay 4.7, details:
 DRMAA version 1.0
 DRMS GridWay (contact: localhost)
    </screen>
    </listitem>

    <listitem>
    <para>
    At the end of the program you should call drmaa_exit() to clean up the
    library internal structures. Beyond this point you should not be calling
    any DRMAA function (there are some exceptions like the information
    functions above, like drmaa_get_contact(),...)
    </para>
    </listitem>
  </orderedlist>

  <para>
  This example shows the same program using the DRMAA JAVA bindings.
  </para>
  <programlisting>
 import org.ggf.gridway.drmaa.*;

 import java.util.*;

 public class Howto1
 {
  public static void main (String[] args)
  {
    SessionFactory  factory = SessionFactory.getFactory();
    Session         session = factory.getSession();

    try
    {
      session.init(null);

      System.out.println("Session Init success");

      System.out.println ("Using " + session.getDRMAAImplementation()
                          + ", details:");

      System.out.println ("\t DRMAA version " + session.getVersion());

      System.out.println ("\t DRMS " + session.getDRMSInfo() +
                          "(contact: " + session.getContact() + ")");

      session.exit();

      System.out.println("Session Exit success");

    }
    catch (DrmaaException e)
    {
      e.printStackTrace();
    }
  }
 }
  </programlisting>

  </section>

  <section><title>Job Template Compilation</title>
  <para>
  So we already have an active session, how do we use it to submit jobs. The
  first thing to do is to provide a description of your job. A job is
  described by its job template (a drmaa_job_template_t variable), which in
  turns is a structure to store information about your job (things like the
  executable, its arguments or the output files).
  </para>

  <para>
  The DRMAA standard provides several pre-defined strings to refer to common job
  template attributes (those staring with DRMAA_ like DRMAA_REMOTE_COMMAND).
  The GridWay library also defines some macros to refer to  GridWay specific
  attributes (those staring with DRMAA_GW_ like DRMAA_GW_INPUT_FILES).
  </para>
  <para>
  There are two kind of attributes: scalar and vector. Scalar attributes are
  simple strings (char *) and corresponds to template attributes in the form:
    <screen>
 attribute = value
    </screen>
  </para>
  <para>
  You can use the drmaa_set_attribute() and drmaa_get_attr_value() to manage
  these scalar attributes. On the other hand, vector attributes corresponds to
  job template variables with one or more values i.e:
  <screen>
 attribute = value1 value2 ... valueN
  </screen>
  </para>
  <para>
  A vector attribute is NULL terminated array of strings (char **). You can use
  the drmaa_set_vector_attribute() and drmaa_get_next_attr_value() to deal with
  vector attributes.
  </para>

  <para>
  We will use a common job template for the rest of the tutorial, so we will
  make a function to set up this job template. Remember to check the return
  codes of the DRMAA functions.
  </para>

  <screen>
 void setup_job_template(drmaa_job_template_t **jt)
 {
  char        error[DRMAA_ERROR_STRING_BUFFER];
  int         rc;
  char        cwd[DRMAA_ATTR_BUFFER];

  const char  *args[3] = {"-l", "-a", NULL};              (See 1)                

  rc = drmaa_allocate_job_template(jt, error, DRMAA_ERROR_STRING_BUFFER-1);
                                                          (See 2)
  if ( rc != DRMAA_ERRNO_SUCCESS)                         
  {							  (See 3)
      fprintf(stderr,"drmaa_allocate_job_template() failed: %s\n", error);
      exit(-1);
  }

  if ( getcwd(cwd, DRMAA_ATTR_BUFFER) == NULL )
  {
      perror("Error getting current working directory");
      exit(-1);
  }

  rc = drmaa_set_attribute(*jt,                           (See 4)
                           DRMAA_WD,
                           cwd,
                           error,
                           DRMAA_ERROR_STRING_BUFFER-1);

  if ( rc != DRMAA_ERRNO_SUCCESS )
  {
      fprintf(stderr,"Error setting job template attribute: %s\n",error);
      exit(-1);
  }

  rc = drmaa_set_attribute(*jt,
                           DRMAA_JOB_NAME,
                           "ht2",
                           error,
                           DRMAA_ERROR_STRING_BUFFER-1);

  rc = drmaa_set_attribute(*jt,                           (See 5)
                           DRMAA_REMOTE_COMMAND,
                           "/bin/ls",
                           error,
                           DRMAA_ERROR_STRING_BUFFER-1);

  rc = drmaa_set_vector_attribute(*jt,                    (See 6)
                                  DRMAA_V_ARGV,
                                  args,
                                  error,
                                  DRMAA_ERROR_STRING_BUFFER-1);

  if ( rc != DRMAA_ERRNO_SUCCESS )
  {
      fprintf(stderr,"Error setting remote command arguments: %s\n",error);
      exit(-1);
  }

  rc = drmaa_set_attribute(*jt,                          (See 7)
                           DRMAA_OUTPUT_PATH,
                           "stdout."DRMAA_GW_JOB_ID,
                           error,
                           DRMAA_ERROR_STRING_BUFFER-1);

  rc = drmaa_set_attribute(*jt,
                           DRMAA_ERROR_PATH,
                           "stderr."DRMAA_GW_JOB_ID,
                           error,
                           DRMAA_ERROR_STRING_BUFFER-1);
    </screen>

    <orderedlist>
      <listitem>
        <para>
        As stated before, every DRMAA function returns an error code that should
        be checked. Check the DRMAA Reference Guide to find out the error codes
        returned by each function.
        </para>
      </listitem>

      <listitem>
        <para>
        In this code we set up a job template for a simple "ls" command. The
        arguments are a vector attribute, in this case we are using two
        arguments "-l" and "-a". Note that we use an array with 3 elements, the
        last one must be always NULL.
        </para>
      </listitem>

      <listitem>
        <para>
        Before using a job template you must allocate it. This
        function allocates memory for the library internal structures of your
        job template. Do not forget to free the job template with
        drmaa_delete_job_template() function.
        </para>
      </listitem>

      <listitem>
        <para>
        The GridWay DRMAA implementation will generate a job template file in
        the job working directory (DRMAA_WD). This attribute
        value should be defined, it defaults to the program current working
        directory (DRMAA_PLACEHOLDER_WD) . Please note that all files
        are named relative to the wotking directory.

        DRMAA_WD is a local path name, this directory will be "recreated"
        (by the use of the DRMAA_GW_INPUT_FILES variable) in the remote host,
        and it will be the working directory of the job on the execution host.
        </para>
      </listitem>

      <listitem>
        <para>
        This is the executable we are going to submit to the Grid, a simple
        "ls".
        </para>
      </listitem>

      <listitem>
        <para>
        Here we set the arguments, note we are using the vector attribute
        function.
        </para>
      </listitem>

      <listitem>
        <para>
        The standard output of our "ls" command will be stored (under the
        DRMAA_WD directory) with name "stdout."DRMAA_GW_JOB_ID. In this
        case we are using an specific GridWay define DRMAA_GW_JOB_ID, which
        corresponds to ${JOB_ID}. So, if our job is assigned with id 34 by
        GridWay, we will have its standard output in "stdout.34". Use always
        this naming pattern not to over-write previously generated files.
        </para>
      </listitem>
  </orderedlist>
  <para>
  If everything went well, the following job template will be generated:
  </para>
  <screen>
 #This file was automatically generated by the GridWay DRMAA library
 EXECUTABLE=/bin/ls
 ARGUMENTS= -l -a
 STDOUT_FILE=stdout.${JOB_ID}
 STDERR_FILE=stderr.${JOB_ID}
 RESCHEDULE_ON_FAILURE=no
 NUMBER_OF_RETRIES=3
  </screen>
  <para>
    This fragment of code shows you how to construct the same template
    using the DRMAA JAVA bindings.
  </para>
  <programlisting>
<![CDATA[
    jt = session.createJobTemplate();

    jt.setWorkingDirectory(java.lang.System.getProperty("user.dir"));

    jt.setJobName("ht2");

    jt.setRemoteCommand("/bin/ls");

    jt.setArgs(new String[] {"-l","-a"});

    jt.setOutputPath("stdout." + SessionImpl.DRMAA_GW_JOB_ID);

    jt.setErrorPath ("stderr." + SessionImpl.DRMAA_GW_JOB_ID);
]]>
  </programlisting>

  </section>

  <section><title>Single Job Submission</title>
  <para>
  We can now submit our "ls" to the Grid. The next example shows you how to
  submit your job, and  how to synchronize its execution. The resource
  usage made by your job is also shown.
  </para>
  <screen>
 int main(int argc, char *argv[])
 {
  char                   error[DRMAA_ERROR_STRING_BUFFER];
  int                    result;
  drmaa_job_template_t * jt;
  char                   job_id[DRMAA_JOBNAME_BUFFER];
  char                   job_id_out[DRMAA_JOBNAME_BUFFER];
  drmaa_attr_values_t *  rusage;
  int                    stat;
  char                   attr_value[DRMAA_ATTR_BUFFER];

  result = drmaa_init (NULL, error, DRMAA_ERROR_STRING_BUFFER-1);

  if ( result != DRMAA_ERRNO_SUCCESS)
  {
    fprintf(stderr,"drmaa_init() failed: %s\n", error);
    return -1;
  }

  setup_job_template(&amp;jt);                              (See 1)

  drmaa_run_job(job_id,
                DRMAA_JOBNAME_BUFFER-1,                 (See 2)
                jt,
                error,
                DRMAA_ERROR_STRING_BUFFER-1);

  fprintf(stderr,"Job successfully submitted ID: %s\n",job_id);

  result = drmaa_wait(job_id,
                      job_id_out,                           (See 3)
                      DRMAA_JOBNAME_BUFFER-1,
                      &amp;stat,
                      DRMAA_TIMEOUT_WAIT_FOREVER,
                      &amp;rusage,
                      error,
                      DRMAA_ERROR_STRING_BUFFER-1);

  if ( result != DRMAA_ERRNO_SUCCESS)
  {
      fprintf(stderr,"drmaa_wait() failed: %s\n", error);
      return -1;
  }

  drmaa_wexitstatus(&amp;stat,stat,error,DRMAA_ERROR_STRING_BUFFER-1);
                                                            (See 4)
  fprintf(stderr,"Job finished with exit code %i, usage: %s\n",stat,job_id);

  while (drmaa_get_next_attr_value(rusage,
                    attr_value,                             (See 5)
                    DRMAA_ATTR_BUFFER-1)!= DRMAA_ERRNO_NO_MORE_ELEMENTS )
      fprintf(stderr,"\t%s\n",attr_value);

  drmaa_release_attr_values (rusage);                       (See 6)

  drmaa_delete_job_template(jt,
                            error,
                            DRMAA_ERROR_STRING_BUFFER-1);

  drmaa_exit (error, DRMAA_ERROR_STRING_BUFFER-1);

  return 0;
 }
    </screen>

    <orderedlist>
      <listitem>
        <para>Let us setup the job template with the previous function</para>
      </listitem>

      <listitem>
        <para>
        Now we can submit a single job to the Grid, with this job template. The
        job id assigned by GridWay to our job is returned in the job_id
        variable. So let us print it and you can check the progress of your
        ls job with the gwps command.
        </para>
      </listitem>

      <listitem>
        <para>
        This function will block (DRMAA_TIMEOUT_WAIT_FOREVER) until the
        job has finished or failed. There are two interesting values returned
        by the drmaa_wait() function: stat (the exit status of your job), and
        rusage (the resource usage made by the "ls" command,
        execution and transfer times). If the job is killed the drmaa_wait()
        will return with DRMAA_ERRNO_NO_RUSAGE.
        </para>
      </listitem>

      <listitem>
        <para>
        DRMAA provides some functions to deal with the stat value. In this
        case we want to get the exit status of our job (you can also check
        if the job was signaled, the signal it received...)
        </para>
      </listitem>

      <listitem>
        <para>
        Lets print the resource usage. As this is of type
        drmaa_attr_values_t we have to iterate over the list to get all the
        values. We finish when we find the DRMAA_ERRNO_NO_MORE_ELEMENTS return
        code.
        </para>
      </listitem>

      <listitem>
        <para>
          Do not forget to free the DRMAA variables, like the job template, or
          the rusage list allocated by the drmaa_wait() function.
        </para>
      </listitem>
  </orderedlist>

  <para>
    This example shows the same program using the DRMAA JAVA bindings.
  </para>

  <programlisting>
<![CDATA[
 try
 {
  session.init(null);

  String id = session.runJob(jt);

  System.out.println("Job successfully submitted ID: " + id);

  JobInfo info = session.wait(id, Session.DRMAA_TIMEOUT_WAIT_FOREVER);

  System.out.println("Job usage:");

  Map rmap = info.getResourceUsage();
  Iterator r = rmap.keySet().iterator();

  while(r.hasNext())
  {
    String name2 = (String) r.next();
    String value = (String) rmap.get(name2);
    System.out.println(" " + name2 + "=" + value);
  }

  session.deleteJobTemplate(jt);

  session.exit();
  }
  catch (DrmaaException e)
  {
    e.printStackTrace();
  }
  ]]>
  </programlisting>
  </section>

  <section><title>Job Status and Control</title>
  <para>
  But you can do more things with a job than just submit it. The DRMAA standard
  allows you to control your jobs (kill, hold, release, stop,...) even they are
  not submitted within a DRMAA session. See the following example:
  </para>

    <screen>
 int main(int argc, char *argv[])
 {
    char                   error[DRMAA_ERROR_STRING_BUFFER];
    int                    rc;
    drmaa_job_template_t * jt;
    char                   job_id[DRMAA_JOBNAME_BUFFER];
    const char             *job_ids[2]={DRMAA_JOB_IDS_SESSION_ALL,NULL};
    int                    status;

    drmaa_init (NULL, error, DRMAA_ERROR_STRING_BUFFER-1);

    setup_job_template(&amp;jt);

    drmaa_set_attribute(jt,                                 (See 1) 
                        DRMAA_JS_STATE,
                        DRMAA_SUBMISSION_STATE_HOLD,
                        error,
                        DRMAA_ERROR_STRING_BUFFER-1);

    drmaa_run_job(job_id,
                  DRMAA_JOBNAME_BUFFER,
                  jt,
                  error,
                  DRMAA_ERROR_STRING_BUFFER-1);

    fprintf(stdout,"Your job has been submitted with id: %s\n", job_id);

    sleep(5);

    drmaa_job_ps(job_id, &amp;status, error, DRMAA_ERROR_STRING_BUFFER);
                                                            (See 2) 
    fprintf(stdout,"Job state is: %s\n",drmaa_gw_strstatus(status));

    sleep(1);

    fprintf(stdout,"Releasing the Job\n");

    rc = drmaa_control(job_id,                              (See 3)
                       DRMAA_CONTROL_RELEASE,
                       error,
                       DRMAA_ERROR_STRING_BUFFER-1);

    if ( rc != DRMAA_ERRNO_SUCCESS)
    {
        fprintf(stderr,"drmaa_control() failed: %s\n", error);
        return -1;
    }

    drmaa_job_ps(job_id, &amp;status, error, DRMAA_ERROR_STRING_BUFFER);

    fprintf(stdout,"Job state is: %s\n",drmaa_gw_strstatus(status));

    fprintf(stdout,"Synchronizing with job...\n");

    rc = drmaa_synchronize(job_ids,                        (See 4)
                           DRMAA_TIMEOUT_WAIT_FOREVER,
                           0,
                           error,
                           DRMAA_ERROR_STRING_BUFFER-1);

    if ( rc != DRMAA_ERRNO_SUCCESS)
    {
        fprintf(stderr,"drmaa_synchronize failed: %s\n", error);
        return -1;
    }

    fprintf(stdout,"Killing the Job\n");

    drmaa_control(job_id,                                   (See 5)
                  DRMAA_CONTROL_TERMINATE,
                  error,
                  DRMAA_ERROR_STRING_BUFFER-1);

    if ( rc != DRMAA_ERRNO_SUCCESS)
    {
        fprintf(stderr,"drmaa_control() failed: %s\n", error);
        return -1;
    }

    fprintf(stdout,"Your job has been deleted\n");

    drmaa_delete_job_template(jt,
                              error,
                              DRMAA_ERROR_STRING_BUFFER-1);

    drmaa_exit (error,DRMAA_ERROR_STRING_BUFFER-1);

    return 0;
}
    </screen>

    <orderedlist>
      <listitem>
        <para>
        We are adding a new attribute to our job template the job
        submission state (DRMAA_JS_STATE). Our job will be held on submission
        </para>
      </listitem>

      <listitem>
        <para>
        Let's check that the job is in the HOLD state. Note that we use a
        GridWay specific function to show the state drmaa_gw_strstatus(). This
        function is not part of the DRMAA standard.
        </para>
      </listitem>

      <listitem>
        <para>
        OK, so we can now release our job, so it will begin its execution (i.e.
        will enter the QUEUED_ACTIVE state)
        </para>
      </listitem>

      <listitem>
        <para>
        Now let us wait for this job, note that we are not using
        drmaa_wait() in this case. drmaa_synchronize() can be used to
        wait for a set of jobs. Its first argument is a NULL terminated array of
        job ids; we are using an special job name: DRMAA_JOB_IDS_SESSION_ALL, to
        wait for all the jobs in submitted within your DRMAA session (other
        special job name is DRMAA_JOB_IDS_SESSION_ANY). The third argument
        (dispose) if equal to 1 will dispose (kill) the job. In this example
        we will do it by hand.
        </para>
      </listitem>

      <listitem>
        <para>Kill the job with the TERMINATE control action.</para>
      </listitem>
  </orderedlist>

  <para>
  Let see the same program in JAVA
  </para>

  <programlisting>
<![CDATA[
  try
  {
    session.init(null);

    setup_job_template();

    String id = session.runJob(jt);

    System.out.println("Job successfully submitted ID: " + id);

    try
    {
      Thread.sleep(5 * 1000);
    }
    catch (InterruptedException e)
    { // Don't care }

    printJobStatus(session.getJobProgramStatus(id));

    try
    {
      Thread.sleep(1000);
    }
    catch (InterruptedException e)
    { // Don't care }

    System.out.println("Releasing the Job");

    session.control(id, Session.DRMAA_CONTROL_RELEASE);

    printJobStatus(session.getJobProgramStatus(id));

    System.out.println("Synchronizing with job...");

    session.synchronize(
          Collections.singletonList(Session.DRMAA_JOB_IDS_SESSION_ALL),
          Session.DRMAA_TIMEOUT_WAIT_FOREVER,
          false);

    System.out.println("Killing the Job");

    session.control(id, Session.DRMAA_CONTROL_TERMINATE);

    session.deleteJobTemplate(jt);

    session.exit();
  }
  catch (DrmaaException e)
  {
    e.printStackTrace();
  }
  ]]>
  </programlisting>
  </section>

  <section><title>Array Jobs (bulk)</title>
  <para>
  Bulk jobs are a direct way to express parametric computations. A bulk job is
  a set of independent (and very similar) tasks that use the same job template.
  You can use the DRMAA_PLACEHOLDER_INCR constat to assign different
  input/output files for each task. The DRMAA_PLACEHOLDER_INCR is a unique
  identifier of each job (task) in the bulk (array) job. In the GridWay DRMAA
  library it corresponds to the ${TASK_ID} parameter.
  </para>
 
   <screen>
 int main(int argc, char *argv[])
 {
    char                   error[DRMAA_ERROR_STRING_BUFFER];
    int                    rc;
    int                    stat;

    drmaa_job_template_t * jt;
    drmaa_attr_values_t  * rusage;
    drmaa_job_ids_t      * jobids;

    char                   value[DRMAA_ATTR_BUFFER];
    const char *           job_ids[2] ={DRMAA_JOB_IDS_SESSION_ALL,NULL};
    char                   job_id_out[DRMAA_JOBNAME_BUFFER];

    int                rcj;

    drmaa_init (NULL, error, DRMAA_ERROR_STRING_BUFFER-1);

    setup_job_template(&amp;jt);

    drmaa_set_attribute(jt,
                        DRMAA_OUTPUT_PATH,
                        "stdout."DRMAA_PLACEHOLDER_INCR,    (See 1) 
                        error,
                        DRMAA_ERROR_STRING_BUFFER-1);

    rc = drmaa_run_bulk_jobs(&amp;jobids,
                             jt,
                             0,				    (See 2)	
                             4,
                             1,
                             error,
                             DRMAA_ERROR_STRING_BUFFER-1);

    if ( rc != DRMAA_ERRNO_SUCCESS)
    {
        fprintf(stderr,"drmaa_run_bulk_job() failed: %s\n", error);
        return -1;
    }

    fprintf(stderr,"Bulk job successfully submitted IDs are:\n");

    do 							   (See 3)
    {
        rc = drmaa_get_next_job_id(jobids, value, DRMAA_ATTR_BUFFER-1);

        if ( rc == DRMAA_ERRNO_SUCCESS )
            fprintf(stderr,"\t%s\n", value);

    }while (rc != DRMAA_ERRNO_NO_MORE_ELEMENTS);

    fprintf(stderr,"Waiting for bulk job to finish...\n");

    drmaa_synchronize(job_ids,                              (See 4)
                      DRMAA_TIMEOUT_WAIT_FOREVER,
                      0,
                      error,
                      DRMAA_ERROR_STRING_BUFFER-1);

    fprintf(stderr,"All Jobs finished\n");

    do
    {
        rcj = drmaa_get_next_job_id(jobids, value, DRMAA_ATTR_BUFFER-1);

        if ( rcj == DRMAA_ERRNO_SUCCESS )
        {
          drmaa_wait(value,                                 (See 5)
                     job_id_out,
                     DRMAA_JOBNAME_BUFFER-1,
                     &amp;stat,
                     DRMAA_TIMEOUT_WAIT_FOREVER,
                     &amp;rusage,
                     error,
                     DRMAA_ERROR_STRING_BUFFER-1);

          drmaa_wexitstatus(&amp;stat,stat,error,DRMAA_ERROR_STRING_BUFFER-1);

          fprintf(stderr,"Rusage for task %s (exit code %i)\n", value, stat);

          do
          {
            rc = drmaa_get_next_attr_value(rusage, value, DRMAA_ATTR_BUFFER-1);

            if ( rc == DRMAA_ERRNO_SUCCESS )
              fprintf(stderr,"\t%s\n", value);

          }while (rc != DRMAA_ERRNO_NO_MORE_ELEMENTS);

          drmaa_release_attr_values(rusage);
       }
    }while (rcj != DRMAA_ERRNO_NO_MORE_ELEMENTS);

    drmaa_release_job_ids(jobids);

    drmaa_delete_job_template(jt,
                              error,
                              DRMAA_ERROR_STRING_BUFFER-1);

    drmaa_exit (error,DRMAA_ERROR_STRING_BUFFER-1);

    return 0;
 }
    </screen>

    <orderedlist>
      <listitem>
        <para>
        The output file of each task in the bulk job will be
        "stdout."DRMAA_PLACEHOLDER_INCR. So the tasks will not over-write each
        others outputs.
       </para>
      </listitem>

      <listitem>
        <para>
        We submit a bulk job with 5 tasks (0,1,2,3,4), note that we will get
        five different output files (stdout.0,stdout.1,...). The job ids
        assigned to each task are stored in the first argument of the function,
        a drmaa_job_ids_t list.
        </para>
      </listitem>

      <listitem>
        <para>
        In order to get each job id you must use the drmaa_get_next_job_id()
        function. We iterate through the list until DRMAA_ERRNO_NO_MORE_ELEMENTS
        is returned.Do not forget to free the job id list when you no longer
        need it.
        </para>
      </listitem>

      <listitem>
        <para>
          We wait for all the jobs in the array. Each you will be disposed with
          a call to the drmaa_wait() function.
        </para>
      </listitem>

      <listitem>
        <para>
        We now use the drmaa_wait() function to get each task exit status and
        resource usage. As we have previously synchronize the bulk job this
        function will not block. drmaa_wait() will also remove each task from
        the GridWay system.
        </para>
      </listitem>
  </orderedlist>

  <para>
    Finally a bulk job in JAVA.
  </para>

  <programlisting>
<![CDATA[
 try
 {
  session.init(null);

  int start = 0;
  int end   = 4;
  int step  = 1;

  int i;

  String id;

  java.util.List          ids = session.runBulkJobs(jt, start, end, step);
  java.util.Iterator      iter = ids.iterator();

  System.out.println("Bulk job successfully submitted IDs are: ");

  while(iter.hasNext())
  {
    System.out.println("\t" + iter.next());
  }

  session.deleteJobTemplate(jt);

  session.synchronize(
            Collections.singletonLsectionist(Session.DRMAA_JOB_IDS_SESSION_ALL),
            Session.DRMAA_TIMEOUT_WAIT_FOREVER,
            false);

  for (int count = start; count <= end;count += step)
  {
    JobInfo info = session.wait(Session.DRMAA_JOB_IDS_SESSION_ANY,
                                Session.DRMAA_TIMEOUT_WAIT_FOREVER);

    System.out.println("Job usage:");
    Map rmap = info.getResourceUsage();
    Iterator r = rmap.keySet().iterator();

    while(r.hasNext())
    {
      String name2 = (String) r.next();
      String value = (String) rmap.get(name2);
      System.out.println(" " + name2 + "=" + value);
    }
  }

  session.exit();
 }
 catch (DrmaaException e)
 {
    System.out.println("Error:   " + e.getMessage());
 }
 ]]>
  </programlisting>
  </section>
</section>
