<section>
	<section>
    <title>A simple computational problem</title>

    <para>
    This is a well known exercise. For our purposes, we will calculate the
    integral of the following function f(x) = 4/(1+x2). So, &#x03C0; will be the
    integral of f(x) in the interval [0,1].
    </para>

    <para>
    In order to calculate the whole integral, it's interesting to divide the
    function in several tasks and compute its area. The following program
    computes the area of a set of intervals, assigned to a given task:
    </para>

    <programlisting>
    #include &lt;stdio.h>
    #include &lt;string.h>

    int main (int argc, char** args)
    {

    int task_id;
    int total_tasks;
    long long int n;
    long long int i;

    double l_sum, x, h;

    task_id = atoi(args[1]);
    total_tasks = atoi(args[2]);
    n = atoll(args[3]);

    fprintf(stderr, "task_id=%d total_tasks=%d n=%lld\n", task_id,
    total_tasks, n);

    h = 1.0/n;

    l_sum = 0.0;

    for (i = task_id; i &lt; n; i += total_tasks)
    {
        x = (i + 0.5)*h;
        l_sum += 4.0/(1.0 + x*x);
    }

    l_sum *= h;

    printf("%0.12g\n", l_sum);

    return 0;
    }
    </programlisting>

    <para>
    We will use this program (<command>pi</command>) to develop our DRMAA
    distributed version.
    </para>
    </section>

    <section>
    <title>The DRMAA code</title>

    <section>
    <title>Setting up the job template</title>

    <para>
    Let us start with the definition of each tasks. As you can see, the
    previous program needs the number of intervals, total tasks, and the task
    number. These variables are available to compile job templates through
    the DRMAA_GW_TASK_ID and DRMAA_GW_TOTAL_TASKS predefined strings.
    </para>

    <para>
    Also, each task must generate a different standard output file, with its
    partial result. We can use the standard DRMAA_PLACEHOLDER_INCR predefined
    string to set up different filenames for each task, so they will not
    overwrite each others output.
    </para>

    <programlisting>
<![CDATA[
      void setup_job_template( drmaa_job_template_t **jt)
      {
      char        error[DRMAA_ERROR_STRING_BUFFER];
      int         rc;
      char        cwd[DRMAA_ATTR_BUFFER];

      const char  *args[4] = {DRMAA_GW_TASK_ID,
                              DRMAA_GW_TOTAL_TASKS,
                              "10000000",
                              NULL};

      rc = drmaa_allocate_job_template(jt, error, DRMAA_ERROR_STRING_BUFFER);

      getcwd(cwd, DRMAA_ATTR_BUFFER)

      rc = drmaa_set_attribute(*jt,
                               DRMAA_WD,
                               cwd,
                               error,
                               DRMAA_ERROR_STRING_BUFFER);

      rc = drmaa_set_attribute(*jt,
                               DRMAA_JOB_NAME,
                               "pi.drmaa",
                               error,
                               DRMAA_ERROR_STRING_BUFFER);

      rc = drmaa_set_attribute(*jt,
                               DRMAA_REMOTE_COMMAND,
                               "pi",
                               error,
                               DRMAA_ERROR_STRING_BUFFER);


      rc = drmaa_set_vector_attribute(*jt,
                                      DRMAA_V_ARGV,
                                      args,
                                      error,
                                      DRMAA_ERROR_STRING_BUFFER);

      rc = drmaa_set_attribute(*jt,
                               DRMAA_OUTPUT_PATH,
                               "stdout."DRMAA_PLACEHOLDER_INCR,
                               error,
                               DRMAA_ERROR_STRING_BUFFER);
      }
]]>
    </programlisting>
  </section>
  <section>
  <title>The main DRMAA routine</title>
  <para>
    The DRMAA program just submits a given number of tasks, each one will
    compute its section of the previous integral. Then we will synchronize
    these tasks, aggregate the partial results to get the total value. Note
    that this results are passed to the DRMAA program through the tasks
    standard output.
  </para>

  <programlisting>
<![CDATA[
  int main(int argc, char **argv)
  {
  int  rc;
  int  end, i;

  char error[DRMAA_ERROR_STRING_BUFFER];
  char value[DRMAA_ATTR_BUFFER];
  char attr_buffer[DRMAA_ATTR_BUFFER];

  const char *job_ids[1] ={DRMAA_JOB_IDS_SESSION_ALL};

  drmaa_job_template_t *jt;
  drmaa_job_ids_t      *jobids;

  FILE *fp;
  float pi, pi_t;

  if ( argc != 2)
  {
    fprintf(stderr,"Usage drmaa_pi <number_of_tasks>\n");
    return -1;
  }
  else
    end = atoi(argv[1]) - 1;

  rc = drmaa_init(NULL, error, DRMAA_ERROR_STRING_BUFFER-1);

  setup_job_template(&jt);

  rc =drmaa_run_bulk_jobs(&jobids,
                          jt,
                          0,
                          end,
                          1,
                          error,
                          DRMAA_ERROR_STRING_BUFFER);

  fprintf(stderr,"Waiting for bulk job to finish...\n");

  rc = drmaa_synchronize(job_ids,
                         DRMAA_TIMEOUT_WAIT_FOREVER,
                         DISPOSE,
                         error,
                         DRMAA_ERROR_STRING_BUFFER);

  fprintf(stderr,"All Jobs finished\n");

  pi = 0.0;

  for(i=0;i<=end;i++)
  {
    snprintf(attr_buffer,DRMAA_ATTR_BUFFER,"stdout.%s",i);

    fp = fopen(attr_buffer,"r");
    fscanf(fp,"%f",&pi_t);
    fprintf(stderr,"Partial computed by task %i = %1.30f\n",i,pi_t);
    fclose(fp);

    pi += pi_t;
  }

  drmaa_release_job_ids(jobids);

  fprintf(stderr,"\nPI=%1.30f\n",pi);

  drmaa_exit(NULL, 0);

  return 0;
  }
]]>
  </programlisting>
  </section>
  </section>
  </section>
