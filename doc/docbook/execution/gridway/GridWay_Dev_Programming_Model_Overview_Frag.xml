<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[

<!ENTITY % myents SYSTEM "../../entities">

%myents;

]>

<section>
<section>
 <title>
   Programming Model
 </title>
 <para>

 One of the most important aspects of Grid Computing is its potential ability
 to execute distributed communicating jobs. The Distributed Resource Management
 Application API (DRMAA) specification constitutes a homogeneous interface to
 different Distributed Resource Management Systems (DRMS) to handle job
 submission, monitoring and control, and retrieval of finished job status.
 </para>

 <para>
 In this way, DRMAA could aid scientists and engineers to express their
 computational problems by providing a portable direct interface to DRMS. There
 are several projects underway to implement the DRMAA specification on
 different DRMS, like Sun Grid Engine (SGE), Condor or Torque.
 </para>

 <para>
 GridWay provides a full-featured native implementation of the DRMAA standard
 to interface DRMS through the Globus Toolkit. The GridWay DRMAA library can
 successfully compile and execute the DRMAA test suite (version 1.4.0).
 Please check the GridWay DRMAA Reference Guide for a complete description of the DRMAA
 routines.
 </para>

 <para>
 Although DRMAA could interface with DRMS at different levels, for example at
 the intranet level with SGE or Condor, with GridWay we will only consider its
 application at Grid level. In this way, the DRMS (GridWay in our case) will
 interact with the local job managers (Condor, PBS, SGE...) through the Grid
 middleware (Globus). This development and execution scheme with DRMAA, GridWay
 and Globus is depicted in the next figure.
 </para>

 <figure><title>Grid Development Model with DRMAA</title>
   <graphic align="center" fileref="developer/gwdrmaa.jpg"/>
 </figure>

 </section>

 <section>
   <title>Application Profiles</title>
   <para>
    DRMAA allows scientists and engineers to express their computational
    problems in a Grid environment. The capture of the job exit code allows
    users to define complex jobs, where each depends on the output and exit
    code from the previous job. They may even involve branching, looping and
    spawning of subtasks, allowing the exploitation of the parallelism
    on the workflow of certain type of applications.
    Let's review some typical scientific application profiles that can benefit
    from DRMAA.
   </para>

   <section>
   <title>Embarrassingly distributed</title>
   <para>
   Applications that can be obviously divided into a number of independent
   tasks. The application is asynchronous when it requires distinct instruction
   streams and so different execution times. A sample of this schema
   with its DRMAA implementation is showed in the following figure.
   </para>

   <figure><title>Embarrassingly Distributed Applications schema</title>
     <graphic align="center" fileref="developer/DF_Image2.jpg"/>
   </figure>

   <screen>
rc = drmaa_init (contact, err);
// Execute initial job and wait for it
rc = drmaa_run_job(job_id, jt, err);
rc = drmaa_wait(job_id, &amp;stat, timeout, rusage, err);
// Execute n jobs simultaneously and wait
rc = drmaa_run_bulk_jobs(job_ids,jt,1, JOB_NUM,1,err);
rc = drmaa_synchronize(job_ids, timeout, 1, err);
// Execute final job and wait for it
rc = drmaa_run_job(job_id, jt, err);
rc = drmaa_wait(job_id,&amp;stat, timeout, rusage, err);
rc = drmaa_exit(err_diag);
  </screen>
  </section>

  <section>
  <title>Master-worker</title>
  <para>
  A Master task assigns a description (input less) of the task to be performed
  by each Worker. Once all the Workers are completed, the Master task performs
  some computations in order to evaluate a stop criterion or to assign new
  tasks to more workers. Again, it could be synchronous or asynchronous. The
  following figure shows a example of Master-worker optimization loop and a
  DRMAA implementation sample.
  </para>

  <figure><title>Master-Worker Applications schema</title>
    <graphic align="center" fileref="developer/MasterWorker.jpg"/>
  </figure>

  <screen>
rc = drmaa_init(contact, err_diag);
// Execute initial job and wait for it
rc = drmaa_run_job(job_id, jt, err_diag);
rc = drmaa_wait(job_id, &amp;stat, timeout, rusage, err_diag);
while (exitstatus != 0)
{
 // Execute n Workers concurrently and wait
 rc = drmaa_run_bulk_jobs(job_ids, jt, 1, JOB_NUM, 1, err_diag);
 rc = drmaa_synchronize(job_ids, timeout, 1, err_diag);
 // Execute the Master, wait and get exit code
 rc = drmaa_run_job(job_id, jt, err_diag);
 rc = drmaa_wait(job_id, &amp;stat, timeout, rusage, err_diag);
 rc = drmaa_wexitstatus(&amp;exitstatus, stat, err_diag);
}
rc = drmaa_exit(err_diag);
  </screen>
  </section>
  </section>
</section>
