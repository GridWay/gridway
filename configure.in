# --------------------------------------------------------------------------
# Copyright 2002-2006 GridWay Team, Distributed Systems Architecture
# Group, Universidad Complutense de Madrid
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# --------------------------------------------------------------------------

AC_PREREQ(2.60)
AC_INIT([GridWay], [5.1], [gridway-user@globus.org])
AC_CONFIG_AUX_DIR(config)
AC_CONFIG_SRCDIR([src/dm/gw_dm_action_dispatch.c])

AC_PREFIX_DEFAULT("/usr/local/gw")

#------------------------------------------------------------------------------
# Build the makefile-header
#------------------------------------------------------------------------------

echo -n "checking for Globus Toolkit..."
if test -z "$GLOBUS_LOCATION" ; then
    echo "GLOBUS_LOCATION is not defined..."
    exit -1
else
   echo "ok"
   
   source $GLOBUS_LOCATION/etc/globus-user-env.sh  > /dev/null 2>&1
   
   if test -x $GLOBUS_LOCATION/bin/globus-makefile-header ; then

       AC_ARG_WITH(flavor,  AC_HELP_STRING([--with-flavor],\
       [Specify globus build flavor (eg. gcc32dbg)]),\
       [FLAVOR=$withval], [])

       if test -z "$FLAVOR" ; then
       
           if test -d $GLOBUS_LOCATION/include/gcc32dbg ; then
            	FLAVOR=gcc32dbg
	       elif test -d $GLOBUS_LOCATION/include/gcc32 ; then
	            FLAVOR=gcc32
	       elif test -d $GLOBUS_LOCATION/include/gcc64dbg ; then
	            FLAVOR=gcc64dbg
	       elif test -d $GLOBUS_LOCATION/include/gcc64 ; then
	            FLAVOR=gcc64
	       elif test -d $GLOBUS_LOCATION/include/vendorcc32dbg ; then
	            FLAVOR=vendorcc32dbg
	       elif test -d $GLOBUS_LOCATION/include/vendorcc32 ; then
	            FLAVOR=vendorcc32
	       elif test -d $GLOBUS_LOCATION/include/vendorcc64dbg ; then
	            FLAVOR=vendorcc64dbg
	       elif test -d $GLOBUS_LOCATION/include/vendorcc64 ; then
	            FLAVOR=vendorcc64
	       else
	          echo "use --with-flavor"
	          exit -1
	       fi
       fi      
   else
	    echo "Could not find globus-makefile-header..."
	    exit -1  
   fi
 
   echo -n "creating makefile-header..."

   globus-makefile-header -flavor $FLAVOR globus_gram_client \
       globus_ftp_client globus_gass_copy > makefile-header

   if test $? -ne 0 ; then
      echo "failed"
      cat makefile-header
      rm makefile-header
      exit -1
   fi
   
   AC_SUBST(incgtmk,"include $PWD/makefile-header")
   echo "ok"

fi

#------------------------------------------------------------------------------
# Check target system
#------------------------------------------------------------------------------

AC_CANONICAL_BUILD

case "$build_os" in
   *linux*)
      system=linux
   ;;
   *solaris*)
      system=solaris
      CFLAGS="$CFLAGS -DGWSOLARIS"
      LDFLAGS="$LDFLAGS -lsocket -lnsl"
   ;;
esac

AC_SUBST(system, $system)

#------------------------------------------------------------------------------
# Argument check
#------------------------------------------------------------------------------

# --- Enable DRMAA library ---

drmaa="drmaa"

AC_ARG_ENABLE(drmaa,  AC_HELP_STRING([--disable-drmaa],\
  [Don't build drmaa support.  Default is enabled.]),\
  [if test $enableval = "no"; then drmaa=" "; drmaa_c_howtos=" "; drmaa_java_howtos=" "; fi], [])

AM_CONDITIONAL(DRMAA, test "x$drmaa" = "xdrmaa")

# --- Enable preWS Drivers ---

prews="prews"

AC_ARG_ENABLE(prews,  AC_HELP_STRING([--disable-prews],\
  [Don't build pre-web-services support. Default is enabled.]),\
  [if test $enableval = "no"; then prews=" "; fi], [])

AM_CONDITIONAL(PREWS, test "x$prews" = "xprews")

# --- Enable WS Drivers ---

ws="ws"

AC_ARG_ENABLE(ws,  AC_HELP_STRING([--disable-ws],\
  [Don't build web-services support. Default is enabled.]),\
  [if test $enableval = "no"; then ws=" "; fi], [])

AM_CONDITIONAL(WS, test "x$ws" = "xws")

# --- Disable JSDL  ---

jsdl="jsdl"

AC_ARG_ENABLE(jsdl,  AC_HELP_STRING([--disable-jsdl],\
  [Don't build jsdl support. Default is enabled.]),\
  [if test $enableval = "no"; then jsdl=" "; fi], [])

AM_CONDITIONAL(JSDL, test "x$jsdl" = "xjsdl")

# --- Enable Debug ---

dbg=""

AC_ARG_ENABLE(debug,  AC_HELP_STRING([--enable-debug],\
  [Enable debug info in GW logs. Default is disabled.]),\
  [CFLAGS="$CFLAGS -Wall -g -DGWIMDEBUG -DGWJOBDEBUG -DGWHOSTDEBUG -DGWEMDEBUG -DGWDMDEBUG  -DGWTMDEBUG -DGWUSERDEBUG -DGWSCHEDDEBUG";], [])

# --- With DB ---

db="db"

LDFLAGS_SAVED=${LDFLAGS}
LDFLAGS="${LDFLAGS} -L/usr/lib";
DB4_INCLUDE_PATH="-I /usr/include"; 

AC_ARG_WITH(db,  AC_HELP_STRING([--with-db=<no|path_to_db>],\
       [Build db support for accounting.]),\
       [if test $withval = "no"; then \
           db=" "; \
           LDFLAGS="${LDFLAGS_SAVED}"; \
           DB4_INCLUDE_PATH=" "; \
        else \
		if test $withval != "yes" ; then \
			LDFLAGS="${LDFLAGS_SAVED} -L${withval}/lib"; \
            DB4_INCLUDE_PATH="-I ${withval}/include"; \
		fi \
 		fi]  , [])
        
AM_CONDITIONAL(DB,test "x$db" = "xdb")

# --- With documents ---

doc="no"

AC_ARG_WITH(doc,  AC_HELP_STRING([--with-doc],\
        [Build documentation]),\
        [if test $withval = "yes"; then doc="yes"; else doc="no"; fi], [])

if test "x$doc" = "xyes" ; then
     AC_PATH_PROG(DB2HTML, db2html)
     AM_CONDITIONAL(DB2HTMLC, test -n "$DB2HTML")

     AC_PATH_PROG(DB2PDF, db2pdf)
     AM_CONDITIONAL(DB2PDFC, test -n "$DB2PDF")
     
     AC_PATH_PROG(JAVADOC, javadoc)
     AM_CONDITIONAL(JAVADOCC, test -n "$JAVADOC")
          
     AC_PATH_PROG(DOXYGEN, doxygen)
     AM_CONDITIONAL(DOXYGENC, test -n "$DOXYGEN")     
     
     AM_CONDITIONAL(DOC, true)
else
     AM_CONDITIONAL(DB2HTMLC, false)
     AM_CONDITIONAL(DB2PDFC, false)
     AM_CONDITIONAL(JAVADOCC, false)
     AM_CONDITIONAL(DOXYGENC, false)          
     AM_CONDITIONAL(DOC, false)
fi

# --- With GridWay tests ---

AC_ARG_WITH(tests,  AC_HELP_STRING([--with-tests],\
        [Build GridWay test suite]),\
        [if test $withval = "yes"; then tests="yes"; else tests="no"; fi], [])

AM_CONDITIONAL(TESTS, test "x$tests" = "xyes")

#------------------------------------------------------------------------------
# Checks for programs.
#------------------------------------------------------------------------------

AC_PROG_AWK
AC_PROG_YACC
AC_PROG_CC
AC_PROG_LN_S
AC_PROG_LIBTOOL
AC_PROG_MAKE_SET

if test "x$ws" = "xws" ; then
	AC_PATH_PROG(JAVAC_PATH, javac)
	
	if test "x$JAVAC_PATH" = "x"; then
    	AC_MSG_WARN("A Java compiler is needed for GridWay's WS Drivers!!!")
    fi
    
    if test "x$JAVA_HOME" = "x"; then
    	AC_MSG_WARN("JAVA_HOME is not set, some Java versions will not work (eg. Mac OS X)")     
    fi
fi 

#------------------------------------------------------------------------------
# Automake Directives
#------------------------------------------------------------------------------

AM_INIT_AUTOMAKE(gw,5.1)
AM_PROG_CC_C_O
AM_PROG_LEX

#------------------------------------------------------------------------------
# Checks for libraries
#------------------------------------------------------------------------------

AC_CHECK_LIB([pthread], [pthread_cond_wait])

if test "x$db" = "xdb"; then
AC_CHECK_LIB([db], [db_env_create])
fi


#------------------------------------------------------------------------------
# Checks for header files.
#------------------------------------------------------------------------------

AC_FUNC_ALLOCA
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([arpa/inet.h fcntl.h inttypes.h libintl.h limits.h malloc.h netdb.h netinet/in.h stddef.h stdlib.h string.h sys/socket.h unistd.h])

#------------------------------------------------------------------------------
# Checks for typedefs, structures, and compiler characteristics.
#------------------------------------------------------------------------------

AC_C_CONST
AC_C_INLINE
AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

AC_TYPE_INT16_T
AC_TYPE_INT32_T
AC_TYPE_INT8_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT8_T

#------------------------------------------------------------------------------
# Checks for library functions.
#------------------------------------------------------------------------------

AC_REPLACE_FNMATCH
AC_FUNC_FORK
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_STAT
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([dup2 getcwd gethostbyname gethostname gettimeofday memset realpath select socket strcasecmp strchr strdup strerror strrchr strstr])

#------------------------------------------------------------------------------
# Config Files
#------------------------------------------------------------------------------

AC_CONFIG_FILES([Makefile
                  src/Makefile
                  doc/Makefile
                  doc/docbook/Makefile])
                  
AC_OUTPUT
